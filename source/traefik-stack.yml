version: "3.9"
x-common:
  authelia-database:
    &db-environment
    POSTGRES_DB: &db-database authelia
    POSTGRES_USER: &db-user "authelia"
    POSTGRES_PASSWORD_FILE: &db-password /run/secrets/authelia_db_password
networks:
  traefik-public:
    external: true
  traefik:
    external: true
  authelia-db:
    driver: overlay
services:
  traefik:
    image: traefik:latest
    command:
      - "--log.level=INFO"
      - "--api=true"
      - "--api.dashboard=true"
      - "--ping=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.dns.address=:53"
      - "--entryPoints.dns-udp.address=:53/udp"
      - "--entryPoints.dnscrypt-udp.address=:443/udp"
      - "--entryPoints.discovery-udp.address=:5353/udp"
      - "--entryPoints.gameserver.address=:27015"
      - "--entryPoints.gameserver-udp.address=:34197/udp"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.web.forwardedHeaders.trustedIPs=${TRUSTED_IPS}"
      - "--entryPoints.web.proxyProtocol.trustedIPs=${TRUSTED_IPS}"
      - "--entryPoints.web.forwardedHeaders.insecure=false"
      - "--entryPoints.web.proxyProtocol.insecure=false"
      - "--entryPoints.websecure.forwardedHeaders.trustedIPs=${TRUSTED_IPS}"
      - "--entryPoints.websecure.proxyProtocol.trustedIPs=${TRUSTED_IPS}"
      - "--entryPoints.websecure.forwardedHeaders.insecure=false"
      - "--entryPoints.websecure.proxyProtocol.insecure=false"
      - "--certificatesResolvers.le.acme.httpchallenge=true"
      - "--certificatesResolvers.le.acme.email=${MAINTAINER_EMAIL}"
      - "--certificatesResolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
      - "--certificatesResolvers.le-dns.acme.dnschallenge=true"
      - "--certificatesResolvers.le-dns.acme.storage=/letsencrypt/cloudflare.json"
      - "--certificatesResolvers.le-dns.acme.email=${MAINTAINER_EMAIL}"
      - "--certificatesResolvers.le-dns.acme.dnschallenge.provider=cloudflare"
      - "--certificatesResolvers.le-dns.acme.dnschallenge.delaybeforecheck=0"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"
      - "--tracing.jaeger.collector.endpoint=http://jaeger:14268/api/traces?format=jaeger.thrift"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--providers.redis.endpoints=${REDIS_ENDPOINT:-redis}:6379"
      - "--providers.file.directory=/etc/traefik/configs/"
      - "--accesslog=true"
    healthcheck:
      test: "wget --spider http://localhost:8080/ping || exit 1"
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
      - target: 53
        published: 53
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: udp
        mode: ingress
      - target: 5353
        published: 5353
        protocol: udp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 34197
        published: 34197
        protocol: udp
        mode: ingress
      - target: 27015
        published: 27015
        protocol: tcp
        mode: ingress
    networks:
      - traefik
      - traefik-public
    configs:
      - source: traefik_conf
        target: /etc/traefik/configs/static.yml
      - source: traefik_tls
        target: /etc/traefik/configs/tls.yml
    secrets:
      - source: cloudflare_dns_api_token
      - source: cloudflare_zone_api_token
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_dns_api_token
      - CF_ZONE_API_TOKEN_FILE=/run/secrets/cloudflare_zone_api_token
      - CLOUDFLARE_TTL=120
    volumes:
      # To persist certificates
      - traefik-certificates:/letsencrypt
      - traefik-configs:/etc/traefik/configs
      - root-certificates:/etc/ssl/traefik:ro
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: on-failure
  traefik-me-certificates:
    # Allow the usage of *.traefik.me domains with TLS
    image: alpine
    command: sh -c "mkdir -p /etc/ssl/traefik/traefik-me
      && cd /etc/ssl/traefik/traefik-me/
      && wget traefik.me/cert.pem -O cert.pem
      && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - root-certificates:/etc/ssl/traefik
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: any
        delay: 72h
        window: 72h
  authelia-users:
    # This will load users once per stack startup
    image: alpine
    command:
      - sh
      - -c
      - cat $$AUTHELIA_USERS_FILE > /config/users.yml
    secrets:
      - source: authelia_default_users
    volumes:
      - authelia-configs:/config
    environment:
      AUTHELIA_USERS_FILE: /run/secrets/authelia_default_users
    deploy:
      mode: replicated
      replicas: 1
  authelia:
    image: authelia/authelia
    depends_on:
      - authelia-db
      - authelia-redis
    networks:
      - traefik-public
      - authelia-db
    secrets:
      - source: authelia_jwt_secret
      - source: authelia_duo_secret_key
      - source: authelia_duo_integration_key
      - source: authelia_session_secret
      - source: authelia_db_password
      - source: authelia_encryption_key
      - source: authelia_redis_password
      - source: sendgrid_smtp_password
    configs:
      - source: authelia_config
        target: /config/configuration.yml
    volumes:
      - authelia-configs:/config
    environment:
      TZ: ${USER_TIMEZONE}
      AUTHELIA_JWT_SECRET_FILE: /run/secrets/authelia_jwt_secret
      AUTHELIA_DEFAULT_REDIRECTION_URL: http://${REDIRECT_SUBDOMAIN}.${DOMAIN_NAME}
      AUTHELIA_DUO_API_HOSTNAME: ${AUTHELIA_DUO_API_HOSTNAME}
      AUTHELIA_DUO_API_INTEGRATION_KEY_FILE: /run/secrets/authelia_duo_integration_key
      AUTHELIA_DUO_API_SECRET_KEY_FILE: /run/secrets/authelia_duo_secret_key
      AUTHELIA_STORAGE_POSTGRES_DATABASE: *db-database
      AUTHELIA_STORAGE_POSTGRES_USERNAME: *db-user
      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: *db-password
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /run/secrets/authelia_encryption_key
      AUTHELIA_SESSION_DOMAIN: ${DOMAIN_NAME}
      AUTHELIA_SESSION_SECRET_FILE: /run/secrets/authelia_session_secret
      AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /run/secrets/authelia_redis_password
      AUTHELIA_NOTIFIER_SMTP_USERNAME: ${SMTP_USER}
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /run/secrets/sendgrid_smtp_password
      AUTHELIA_NOTIFIER_SMTP_SENDER: Authelia <${AUTHELIA_SMTP_FROM}>
      AUTHELIA_NOTIFIER_SMTP_STARTUP_CHECK_ADDRESS: ${MAINTAINER_EMAIL}
      AUTHELIA_TOTP_ISSUER: ${DOMAIN_NAME}
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: any
      labels:
        - 'traefik.enable=true'
        - 'traefik.http.routers.authelia.rule=Host(`${AUTHELIA_PREFIX}.${DOMAIN_NAME}`)'
        - 'traefik.http.routers.authelia.entryPoints=websecure'
        - 'traefik.http.routers.authelia.tls=true'
        - "traefik.http.routers.authelia.tls.certresolver=le-dns"
        - "traefik.http.services.authelia.loadbalancer.server.port=9091"
        - 'traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/verify?rd=https%3A%2F%2Fauth.${DOMAIN_NAME}%2F'
        - 'traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true'
        - 'traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
        - 'traefik.http.middlewares.authelia-basic.forwardAuth.address=http://authelia:9091/api/verify?auth=basic'
        - 'traefik.http.middlewares.authelia-basic.forwardAuth.trustForwardHeader=true'
        - 'traefik.http.middlewares.authelia-basic.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email'
        - 'traefik.docker.network=traefik-public'
  authelia-db:
    image: postgres:14-alpine
    networks:
      - authelia-db
    configs:
      - source: authelia_postgres_init
        target: /docker-entrypoint-initdb.d/init.sql
    volumes:
      - authelia-data:/var/lib/postgresql/data
    environment:
      << : *db-environment
    secrets:
      - source: authelia_db_password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - 'traefik.enable=false'
  authelia-redis:
    image: redis:7-alpine
    command:
      - /bin/ash
      - -c
      - redis-server --requirepass $$(cat $$REDIS_PASSWORD_FILE)
    networks:
      - authelia-db
    volumes:
      - authelia-redis-config:/usr/local/etc/redis
    secrets:
      - source: authelia_redis_password
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/authelia_redis_password
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - 'traefik.enable=false'
  jaeger:
    image: jaegertracing/all-in-one
    configs:
      - source: jaeger_trafik_config
        target: /etc/jaeger-traefik.yml
    networks:
      - traefik
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.jaeger.rule=Host(`jaeger.${LOCAL_DOMAIN:-home}`)"
        - "traefik.http.routers.jaeger.service=jaeger@docker"
        - "traefik.http.routers.jaeger.entrypoints=web"
        - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
  prometheus:
    image: prom/prometheus
    networks:
      - traefik-public
      - traefik
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules
    secrets:
      - source: monitoring_watchtower_auth_token
        target: watchtower_auth_token
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.service=prometheus@docker"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${LOCAL_DOMAIN:-home}`)"
        - "traefik.http.routers.prometheus.entrypoints=web"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.docker.network=traefik-public"
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "http://localhost:3000/ping", "-q", "--tries", "1", "-O", "/dev/null"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_dashboards:/etc/grafana/provisioning/dashboards
    configs:
      - source: grafana_datasources
        target: /etc/grafana/provisioning/datasource.yml
      - source: grafana_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
    secrets:
      - source: google_oauth_secret
      - source: grafana_admin_password
      - source: sendgrid_smtp_password
      - source: storage_postgres_db_password
        target: postgres_db_password
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_SERVER_DOMAIN=grafana.${DOMAIN_NAME}
      - GF_SERVER_ROOT_URL=%(protocol)ss://%(domain)s/
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.net:587
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD__FILE=/run/secrets/sendgrid_smtp_password
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM}
      - GF_AUTH_GOOGLE_ENABLED=true
      - GF_AUTH_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GF_AUTH_GOOGLE_CLIENT_SECRET__FILE=/run/secrets/google_oauth_secret
      - GF_AUTH_GOOGLE_ALLOWED_DOMAINS=gmail.com
      - GF_AUTH_GOOGLE_ALLOW_SIGN_UP=false
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${GF_DATABASE_HOST:-"postgres:5432"}
      - GF_DATABASE_USER=${POSTGRES_USER:-postgres}
      - GF_DATABASE_PASSWORD__FILE=/run/secrets/postgres_db_password
      - GF_DATABASE_NAME=${POSTGRES_DB:-postgres}
    env_file:
      - ../configs/grafana/config.monitoring
    networks:
      - traefik-public
      - traefik
    deploy:
      mode: replicated
      replicas: 3
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.service=grafana@docker"
        - "traefik.http.routers.grafana-http.entrypoints=web"
        - "traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana-http.middlewares=grafana-https@docker"
        - 'traefik.http.routers.grafana.middlewares=authelia@docker'
        - "traefik.http.middlewares.grafana-https.redirectscheme.scheme=https"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=le"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=traefik-public"
      placement:
        constraints:
          - node.platform.os == linux
      restart_policy:
        condition: any
  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - traefik-public
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
  portainer:
    image: portainer/portainer-ce:2.15.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainerdata:/data
    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - 'traefik.http.routers.portainer.middlewares=authelia@docker'
        - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls.certresolver=le"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
volumes:
  portainerdata:
  traefik-configs: {}
  authelia-configs: {}
  authelia-data: {}
  authelia-redis-config: {}
  traefik-certificates:
  root-certificates: {}
  prometheus_data: {}
  grafana_data: {}
  grafana_dashboards: {}
configs:
  traefik_conf:
    name: traefik_conf-${CONFIG_VERSION:-0}
    file: ../configs/traefik/static_conf.yml
  traefik_tls:
    name: traefik_tls-${CONFIG_VERSION:-0}
    file: ../configs/traefik/tls.yml
  authelia_config:
    name: authelia_config-${CONFIG_VERSION:-0}
    file: ../configs/authelia/configuration.yml
  authelia_postgres_init:
    name: authelia_postgres_init-${CONFIG_VERSION:-0}
    file: ../configs/authelia/postgres_init.sql
  grafana_datasources:
    name: grafana_datasources-${CONFIG_VERSION:-0}
    file: ../configs/grafana/provisioning/datasources/datasource.yml
  grafana_dashboards:
    name: grafana_dashboards-${CONFIG_VERSION:-0}
    file: ../configs/grafana/provisioning/dashboards/dashboard.yml
  prometheus_config:
    name: prometheus_config-${CONFIG_VERSION:-0}
    file: ../configs/prometheus/prometheus.yml
  prometheus_rules:
    name: prometheus_rules-${CONFIG_VERSION:-0}
    file: ../configs/prometheus/alert.rules
  jaeger_trafik_config:
    name: jaeger_trafik_config-${CONFIG_VERSION:-0}
    file: ../configs/jaeger-traefik.yml
secrets:
  authelia_default_users:
    name: authelia_default_users-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/users.yml
  authelia_jwt_secret:
    name: authelia_jwt_secret-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/jwt_secret
  authelia_duo_secret_key:
    name: authelia_duo_secret_key-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/duo_secret_key
  authelia_duo_integration_key:
    name: authelia_duo_integration_key-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/duo_integration_key
  authelia_session_secret:
    name: authelia_session_secret-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/session_secret
  authelia_db_password:
    name: authelia_db_password-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/postgres_password
  authelia_encryption_key:
    name: authelia_encryption_key-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/encryption_key
  authelia_redis_password:
    name: authelia_redis_password-${CONFIG_VERSION:-0}
    file: ../secrets/authelia/redis_password
  grafana_admin_password:
    file: ../secrets/grafana/admin_password
  google_oauth_secret:
    file: ../secrets/google/google_oauth_secret
  sendgrid_smtp_password:
    file: ../secrets/sendgrid/smtp_password
  cloudflare_dns_api_token:
    file: ../secrets/cloudflare/dns_api_token
  cloudflare_zone_api_token:
    file: ../secrets/cloudflare/zone_api_token
  storage_postgres_db_password:
    external: true
  monitoring_watchtower_auth_token:
    external: true
