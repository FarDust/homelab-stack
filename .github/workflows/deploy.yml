name: üöÄ Deploy Workflow
on:
  push:
    branches:
      - main
jobs:
  deploy_traefik:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      DEPLOY_FOLDER: /tmp/deploy/traefik
      STACK_NAME: personal-stack
      STACK_FILE: traefik-stack.yml
    steps:
      - name: üì• Check out code
        uses: actions/checkout@v2

      - name: üì• Install Doppler CLI
        uses: dopplerhq/cli-action@v2

      - name: üìù Save version
        id: get-version
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üêá Tailscale
        uses: tailscale/github-action@8b804aa882ac3429b804a2a22f9803a2101a0db9
        env:
          TS_EXPERIMENT_OAUTH_AUTHKEY: true
        with:
          authkey: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
          version: 1.40.0
          args: --advertise-tags tag:deploy-job

      - name: üóëÔ∏è Remove Tailscale Machine (Post-Action)
        uses: webiny/action-post-run@3.0.0
        with:
          run: sudo tailscale logout

      - name: üîå Check Tailscale Connectivity
        run: |
          if tailscale ping ${{ secrets.TS_DEPLOY_HOST }} >/dev/null 2>&1; then
            echo "Host Reached! ‚úÖ"
          else
            echo "Host Not Reachable! ‚ùå"
          fi

      - name: üîë Authenticate
        uses: google-github-actions/auth@v0
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_AUTH_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: üìú Retrieve secrets from GCP Secret Manager
        id: get-secrets
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          secrets: |
            authelia-duo_integration_key:${{ secrets.GCP_PROJECT_ID }}/authelia-duo_integration_key
            authelia-duo_secret_key:${{ secrets.GCP_PROJECT_ID }}/authelia-duo_secret_key
            authelia-jwt_secret:${{ secrets.GCP_PROJECT_ID }}/authelia-jwt_secret
            authelia-postgres_password:${{ secrets.GCP_PROJECT_ID }}/authelia-postgres_password
            authelia-redis_password:${{ secrets.GCP_PROJECT_ID }}/authelia-redis_password
            authelia-session_secret:${{ secrets.GCP_PROJECT_ID }}/authelia-session_secret
            authelia-encryption_key:${{ secrets.GCP_PROJECT_ID }}/authelia-encryption_key
            authelia-users:${{ secrets.GCP_PROJECT_ID }}/authelia-users
            cloudflare-dns_api_token:${{ secrets.GCP_PROJECT_ID }}/cloudflare-dns_api_token
            cloudflare-zone_api_token:${{ secrets.GCP_PROJECT_ID }}/cloudflare-zone_api_token
            grafana-admin_password:${{ secrets.GCP_PROJECT_ID }}/grafana-admin_password
            google-google_oauth_token:${{ secrets.GCP_PROJECT_ID }}/google-google_oauth_token
            sendgrid-smtp_password:${{ secrets.GCP_PROJECT_ID }}/sendgrid-smtp_password

      - name: üìÇ Create temporary folders for Traefik stack
        run: |
          mkdir -p ./secrets
          mkdir -p ./secrets/authelia/
          mkdir -p ./secrets/cloudflare/
          mkdir -p ./secrets/grafana/
          mkdir -p ./secrets/google/
          mkdir -p ./secrets/sendgrid/

      - name: ‚¨áÔ∏è Fetch Docker environment variables from Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: doppler secrets download -p personal-docker-stack  -c prd_traefik_stack --format=env --no-file > env_vars
      
      - name: üìÑ Check .env file
        run: |
          if [ -f env_vars ]; then
            echo ".env file found"
          else
            echo ".env file not found"
            exit 1
          fi
      
      - name: üìù Write secrets to files
        run: |
          echo "${{ steps.get-secrets.outputs.authelia-duo_integration_key }}" > ./secrets/authelia/duo_integration_key
          echo "${{ steps.get-secrets.outputs.authelia-duo_secret_key }}" > ./secrets/authelia/duo_secret_key
          echo "${{ steps.get-secrets.outputs.authelia-jwt_secret }}" > ./secrets/authelia/jwt_secret
          echo "${{ steps.get-secrets.outputs.authelia-postgres_password }}" > ./secrets/authelia/postgres_password
          echo "${{ steps.get-secrets.outputs.authelia-redis_password }}" > ./secrets/authelia/redis_password
          echo "${{ steps.get-secrets.outputs.authelia-session_secret }}" > ./secrets/authelia/session_secret
          echo "${{ steps.get-secrets.outputs.authelia-encryption_key }}" > ./secrets/authelia/encryption_key
          echo "${{ steps.get-secrets.outputs.authelia-users }}" > ./secrets/authelia/users.yml
          echo "${{ steps.get-secrets.outputs.cloudflare-dns_api_token }}" > ./secrets/cloudflare/dns_api_token
          echo "${{ steps.get-secrets.outputs.cloudflare-zone_api_token }}" > ./secrets/cloudflare/zone_api_token
          echo "${{ steps.get-secrets.outputs.grafana-admin_password }}" > ./secrets/grafana/admin_password
          echo "${{ steps.get-secrets.outputs.google-google_oauth_token }}" > ./secrets/google/google_oauth_secret
          echo "${{ steps.get-secrets.outputs.sendgrid-smtp_password }}" > ./secrets/sendgrid/smtp_password

      - name: üîí Setup SSH
        id: setup_ssh
        env:
          SSH_KEY_FILE: .ssh/id_ecdsa
        run: |
          mkdir -p $HOME/.ssh
          ssh-keyscan ${{ secrets.TS_DEPLOY_HOST }} >> $HOME/.ssh/known_hosts
          export SSH_KEY_FILE=$HOME/$SSH_KEY_FILE
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $SSH_KEY_FILE
          chmod 600 $SSH_KEY_FILE

          if ! ssh-keygen -e -f $SSH_KEY_FILE -m pem > /dev/null 2>&1; then
            echo "Invalid OpenSSH format for SSH key"
            exit 1
          fi

          echo "::set-output name=ssh_key_file::$SSH_KEY_FILE"

      - name: üîê Remove SSH credentials (Post Action)
        uses: webiny/action-post-run@3.0.0
        with:
          run: |
            rm -f ${{ steps.setup_ssh.outputs.ssh_key_file }}

      - name: üß™ Test SSH connection
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.TS_DEPLOY_HOST }}
        run: |
          ssh -i ${{ steps.setup_ssh.outputs.ssh_key_file }} -p ${{ secrets.SSH_PORT }} $SSH_USERNAME@$SSH_HOST "echo 'SSH connection successful'; exit"
     
      - name: üìÅ Create deploy directory
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.TS_DEPLOY_HOST }}
        run: |
          ssh -i ${{ steps.setup_ssh.outputs.ssh_key_file }} -p ${{ secrets.SSH_PORT }} $SSH_USERNAME@$SSH_HOST \
          "mkdir -p /tmp/deploy/traefik/"
      
      - name: üìÑ List files
        run: |
          ls -al
      
      - name: üì• Copy files to target computer
        run: |
          rsync -avz ./* ${{ secrets.SSH_USERNAME }}@${{ secrets.TS_DEPLOY_HOST }}:$DEPLOY_FOLDER/
          
      - name: üóëÔ∏è Clear Remote Machine (Post-Action)
        uses: webiny/action-post-run@3.0.0
        with:
          run: |
            ssh -i ${{ steps.setup_ssh.outputs.ssh_key_file }} -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.TS_DEPLOY_HOST }} "rm -rf $DEPLOY_FOLDER"

      - name: üöÄ Deploy Traefik stack
        run: |
          ssh -i ${{ steps.setup_ssh.outputs.ssh_key_file }} -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.TS_DEPLOY_HOST }} "set -e && export CONFIG_VERSION=${{ steps.get-version.outputs.sha_short }} && export $(cat $DEPLOY_FOLDER/env_vars)  && docker stack deploy -c $DEPLOY_FOLDER/source/$STACK_FILE $STACK_NAME"
