version: "3.9"
networks:
  traefik-public:
    external: true
  traefik:
    external: true
services:
  traefik:
    image: traefik:latest
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--pilot.token=${TRAEFIK_COPILOT_TOKEN}"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.dns.address=:53"
      - "--entryPoints.dns-udp.address=:53/udp"
      - "--entryPoints.dnscrypt-udp.address=:443/udp"
      - "--entryPoints.discovery-udp.address=:5353/udp"
      - "--certificatesResolvers.le.acme.httpchallenge=true"
      - "--certificatesResolvers.le.acme.email=${MAINTAINER_EMAIL}"
      - "--certificatesResolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
      - "--certificatesResolvers.le-dns.acme.dnschallenge=true"
      - "--certificatesResolvers.le-dns.acme.storage=/letsencrypt/cloudflare.json"
      - "--certificatesResolvers.le-dns.acme.email=${MAINTAINER_EMAIL}"
      - "--certificatesResolvers.le-dns.acme.dnschallenge.provider=cloudflare"
      - "--certificatesResolvers.le-dns.acme.dnschallenge.delaybeforecheck=0"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
      - target: 53
        published: 53
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: udp
        mode: ingress
      - target: 5353
        published: 5353
        protocol: udp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
    networks:
      - traefik
      - traefik-public
    secrets:
      - source: cloudflare_dns_api_token
      - source: cloudflare_zone_api_token
    environment:
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_dns_api_token
      - CF_ZONE_API_TOKEN_FILE=/run/secrets/cloudflare_zone_api_token
      - CLOUDFLARE_TTL=60
    volumes:
      # To persist certificates
      - traefik-certificates:/letsencrypt
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 5
        delay: 10s
      restart_policy:
        condition: on-failure
  jaeger:
    image: jaegertracing/all-in-one
    configs:
      - source: jaeger_trafik_config
        target: /etc/jaeger-traefik.yml
    networks:
      - traefik
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.jaeger.rule=Host(`jaeger.${LOCAL_DOMAIN:-home}`)"
        - "traefik.http.routers.jaeger.service=jaeger@docker"
        - "traefik.http.routers.jaeger.entrypoints=web"
        - "traefik.http.services.jaeger.loadbalancer.server.port=16686"
  prometheus:
    image: prom/prometheus
    networks:
      - traefik-public
      - traefik
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_rules
        target: /etc/prometheus/alert.rules
    secrets:
      - source: monitoring_watchtower_auth_token
        target: watchtower_auth_token
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.service=prometheus@docker"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.${LOCAL_DOMAIN:-home}`)"
        - "traefik.http.routers.prometheus.entrypoints=web"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.docker.network=traefik-public"
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  grafana:
    image: grafana/grafana-oss:latest
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_dashboards:/etc/grafana/provisioning/dashboards
    configs:
      - source: grafana_datasources
        target: /etc/grafana/provisioning/datasource.yml
      - source: grafana_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
    secrets:
      - source: google_oauth_secret
      - source: grafana_admin_password
      - source: sendgrid_smtp_password
      - source: storage_postgres_db_password
        target: postgres_db_password
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_SERVER_DOMAIN=grafana.${DOMAIN_NAME}
      - GF_SERVER_ROOT_URL=%(protocol)ss://%(domain)s/
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.net:587
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD__FILE=/run/secrets/sendgrid_smtp_password
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM}
      - GF_AUTH_GOOGLE_ENABLED=true
      - GF_AUTH_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GF_AUTH_GOOLGE_CLIENT_SECRET__FILE=/run/secrets/google_oauth_secret
      - GF_AUTH_GOOGLE_ALLOWED_DOMAINS=${DOMAIN_NAME}
      - GF_AUTH_GOOGLE_ALLOW_SIGN_UP=false
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${GF_DATABASE_HOST:-"postgres:5432"}
      - GF_DATABASE_USER=${POSTGRES_USER:-postgres}
      - GF_DATABASE_PASSWORD__FILE=/run/secrets/postgres_db_password
      - GF_DATABASE_NAME=${POSTGRES_DB:-postgres}
    env_file:
      - ./configs/grafana/config.monitoring
    networks:
      - traefik-public
      - traefik
    user: "104"
    deploy:
      mode: replicated
      replicas: 3
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.service=grafana@docker"
        - "traefik.http.routers.grafana-http.entrypoints=web"
        - "traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN_NAME}`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana-http.middlewares=grafana-https@docker"
        - "traefik.http.middlewares.grafana-https.redirectscheme.scheme=https"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=le"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=traefik-public"
      placement:
        constraints:
          - node.platform.os == linux
      restart_policy:
        condition: on-failure
  agent:
    image: portainer/agent:2.11.1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - traefik-public
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]
  portainer:
    image: portainer/portainer-ce:2.11.1
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainerdata:/data
    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.routers.portainer.tls.certresolver=le"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
volumes:
  portainerdata:
  traefik-certificates:
  prometheus_data: {}
  grafana_data: {}
  grafana_dashboards: {}
configs:
  grafana_datasources:
    file: ./configs/grafana/provisioning/datasources/datasource.yml
  grafana_dashboards:
    file: ./configs/grafana/provisioning/dashboards/dashboard.yml
  prometheus_config:
    file: ./configs/prometheus/prometheus.yml
  prometheus_rules:
    file: ./configs/prometheus/alert.rules
  jaeger_trafik_config:
    file: ./configs/jaeger-traefik.yml
secrets:
  grafana_admin_password:
    file: ./secrets/grafana/admin_password
  google_oauth_secret:
    file: ./secrets/google/google_oauth_secret
  sendgrid_smtp_password:
    file: ./secrets/sendgrid/smtp_password
  cloudflare_dns_api_token:
    file: ./secrets/cloudflare/dns_api_token
  cloudflare_zone_api_token:
    file: ./secrets/cloudflare/zone_api_token
  storage_postgres_db_password:
    external: true
  monitoring_watchtower_auth_token:
    external: true
